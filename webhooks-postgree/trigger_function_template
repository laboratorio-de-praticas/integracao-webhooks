CREATE TYPE "EventoTipos" AS ENUM ('Externo', 'Interno');
CREATE TYPE "EventoStatus" AS ENUM ('Ativo', 'Em_Preparo', 'Em_Contagem', 'Finalizado');
CREATE TYPE "CandidatoSituacao" AS ENUM ('Pendente', 'Ativo', 'Encerrado');
CREATE TYPE "UsuarioTipos" AS ENUM ('Admin', 'Atendente');
CREATE TYPE "UsuarioStatus" AS ENUM ('Pendente', 'Ativo', 'Desligado');

CREATE TABLE "Usuario" (
  id SERIAL PRIMARY KEY,
  nome TEXT,
  senha TEXT,
  email_institucional TEXT,
  tipo_usuario "UsuarioTipos" NOT NULL,
  status_usuario "UsuarioStatus" NOT NULL,
  data_criacao TIMESTAMP DEFAULT now(),
  data_alteracao TIMESTAMP DEFAULT now()
);

CREATE TABLE "Candidato" (
  id SERIAL PRIMARY KEY,
  id_aluno INT REFERENCES "Aluno"(id_aluno),
  id_projeto INT REFERENCES "Projeto"(id_projeto),
  id_evento INT NOT NULL REFERENCES "Evento"(id_evento),
  qrcode TEXT,
  situacao_candidato "CandidatoSituacao" NOT NULL,
  data_criacao TIMESTAMP DEFAULT now(),
  data_alteracao TIMESTAMP DEFAULT now()
);

CREATE TABLE "Aluno" (
  id_aluno SERIAL PRIMARY KEY,
  foto_url TEXT,
  data_ingresso TIMESTAMP,
  data_criacao TIMESTAMP DEFAULT now(),
  data_alteracao TIMESTAMP DEFAULT now(),
  curso_semestre TEXT,
  fk_id_usuario INT NOT NULL REFERENCES "Usuario"(id)
);

CREATE TABLE "Projeto" (
  id_projeto SERIAL PRIMARY KEY,
  titulo TEXT NOT NULL,
  descricao TEXT NOT NULL,
  data_criacao TIMESTAMP DEFAULT now(),
  data_alteracao TIMESTAMP DEFAULT now()
);

CREATE TABLE "Participante" (
  id_participante SERIAL PRIMARY KEY,
  id_aluno INT REFERENCES "Aluno"(id_aluno),
  id_visitante INT REFERENCES "Visitante"(id_visitante),
  id_evento INT NOT NULL REFERENCES "Evento"(id_evento),
  avaliador BOOLEAN DEFAULT false
);


CREATE TABLE "Evento" (
  id_evento SERIAL PRIMARY KEY,
  tipo_evento "EventoTipos" NOT NULL,
  nome_evento TEXT,
  descricao_evento TEXT,
  status_evento "EventoStatus" NOT NULL,
  curso_semestre TEXT,
  data_inicio TIMESTAMP,
  data_fim TIMESTAMP,
  data_criacao TIMESTAMP DEFAULT now(),
  data_alteracao TIMESTAMP DEFAULT now()
);

create table "Voto"(
id_voto SERIAL PRIMARY KEY,
id_candidato INT,
id_participante INT,
id_evento INT,
data_criacao TIMESTAMP DEFAULT now(),
data_alteracao TIMESTAMP DEFAULT now(),
FOREIGN KEY (id_evento) REFERENCES Eventos(id_evento)
);

create or replace function notificar_novo_voto() returns trigger as $$
declare 
  	tipoEvent VARCHAR;
	qtd_votos INT;
	registro_json JSON;
begin
	Select Evento.tipoEvento INTO STRICT tipoEvent
	from Evento where id_evento = new.id_evento;
	Select count(id_candidato) INTO STRICT qtd_votos
	from Voto WHERE id_candito = new.id_candidato;
	registro_json := json_build_object(
		'id_voto', new.id_voto,
		'id_candidato', new.id_candidato,
		'id_participante', new.id_participante,
		'id_evento', new.id_evento,
		'tipoevento', tipoEvent,
		'qtd_votos', qtd_votos,
		'data_criacao', new.data_criacao
);
	Perform pg_notify('new_vote', registro_json::TEXT);
	return new;
end;
$$ language plpgsql;

create trigger trigger_notificar_novo_voto
after insert on Voto
for each row
execute function notificar_novo_voto();

INSERT INTO Eventos(tipoEvento,nomeEvento,descricaoEvento,
statusEvento,data_inicio,data_fim) VALUES
('Interno','Votação Representantes 2025-2','A votação de representantes do 2º semestre de 2025',
TRUE, '2025-03-31 18:30:00', '2025-04-10 23:00:00'),
('Externo','Hubtech 2025-2','A votação dos projetos da hubtech de 2025',
TRUE, '2025-04-15 18:30:00', '2025-04-15 23:00:00');

select * from eventos;

insert into votos(id_candidato,id_participante,id_evento)
VALUES
(2,2,2);